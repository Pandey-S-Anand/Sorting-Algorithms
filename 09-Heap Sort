class Solution {
    public void heapSort(int arr[], int n) {
        buildMaxHeap(arr, n);

        for (int i = n - 1; i > 0; i--) {
            swap(arr, 0, i);
            heapify(arr, i, 0);
        }
    }

    // Function to build a MaxHeap from array.
    void buildMaxHeap(int arr[], int n) {
        for (int i = ((n / 2) - 1); i >= 0; i--) {
            heapify(arr, n, i);
        }
    }

    // Heapify function to maintain MaxHeap property.
    void heapify(int arr[], int n, int i) {
        int maxIdx = i, leftChildIdx = (2 * i) + 1, rightChildIdx = (2 * i) + 2;

        if (leftChildIdx < n && arr[maxIdx] < arr[leftChildIdx]) {
            maxIdx = leftChildIdx;
        }

        if (rightChildIdx < n && arr[maxIdx] < arr[rightChildIdx]) {
            maxIdx = rightChildIdx;
        }

        if (maxIdx != i) {
            swap(arr, i, maxIdx);
            heapify(arr, n, maxIdx);
        }
    }

    void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}
